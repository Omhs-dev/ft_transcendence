<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register / Login</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/register_style.css' %}">
</head>
<body>
    <div class="container">
        <h1 id="welcomeMessage">Welcome</h1>
        <div id="authSection">
            <!-- Registration Form -->
            <div id="registerSection">
                <h2>Register</h2>
                <form id="registerForm">
                    <label for="reg_username">Username:</label>
                    <input type="text" id="reg_username" name="username" required>
                    
                    <label for="reg_email">Email:</label>
                    <input type="email" id="reg_email" name="email" required>
                    
                    <label for="reg_password">Password:</label>
                    <input type="password" id="reg_password" name="password" required>
                    
                    <button type="submit">Register</button>
                </form>
            </div>

			<!-- Login Form -->
			<div id="loginSection">
				<h2>Login</h2>
				<form id="loginForm">
					<label for="login_username">Username:</label>
					<input type="text" id="login_username" name="username" required>
					
					<label for="login_password">Password:</label>
					<input type="password" id="login_password" name="password" required>

					<!-- Hidden OTP Section -->
					<div id="otpSection" style="display: none;">
						<label for="otp_method">2FA Method:</label>
						<select id="otp_method" name="method" required>
							<option value="totp">Authenticator App</option>
							<option value="sms">SMS</option>
							<option value="email">Email</option>
						</select>
						<p id="msg">msg</p>
						<label for="otp_code">Enter OTP Code:</label>
						<input type="text" id="otp_code" name="otp_code">
					</div>

					<button type="submit" id="loginButton">Login</button>
				</form>
			</div>
			<div>
				<button onclick="loginWith42()" style="margin-top: 2%;">Login with 42</button>
			</div>
		</div>

        <!-- Dashboard Section -->
        <div id="dashboard" style="display: none;">
            <h2>Dashboard</h2>
            <button id="logoutButton">Logout</button>
            <div style="margin-top:5%">
                <button><a href="{% url 'game_ui' %}" >Start Game</a> </button>
            </div>
            <!-- Online Users -->
            <div id="onlineUsers">
                <h3>Online Users</h3>
                <ul id="userList"></ul>
            </div>
            <!-- W.B Online Users -->
            <div id="WBonlineUsers">
                <h3>W.B Online Users</h3>
                <ul id="WBuserList"></ul>
            </div>

			<div id="chatArea" style="display:none;">
				<h3 id="chatWith"></h3>
				<div id="chatMessages"></div>
				<input type="text" id="chatInput" placeholder="Type your message here...">
				<button id="sendMessage">Send</button>
			</div>

            <br>
			<!-- Friends Requests -->
            <div id="friendreq">
                <h3>My Friends Requests</h3>
                <ul id="friendRequests"></ul>
            </div>

            <!-- Friends List -->
            <div id="friendLists">
                <h3>My Friends :</h3>
                <ul id="friendList"></ul>
            </div>

			

			<!-- Profile Section -->
			<div id="profileSection">
				<h2>Profile</h2>
				<form id="profileForm">
					<label for="profileBio">Bio:</label>
					<textarea id="profileBio" name="bio"></textarea>
					<br>
					<label for="profilePhone">Phone:</label>
					<textarea id="profilePhone" name="Phone"></textarea>
					<br>

					<label for="profilePicture">Upload Profile Picture:</label>
					<input type="file" id="profilePicture" name="profile_picture" accept="image/*">
					<br>
					<!-- Profile Picture Preview -->
					<img id="profilePicturePreview" src="{{ profile.profile_picture.url }}" alt="Profile Picture" style="display: none; width: 150px; height: 150px; object-fit: cover; border-radius: 50%; margin-top: 10px;">
			
					<button type="submit">Update Profile</button>
				</form>
				<!-- 2FA Section -->
				<div id="twoFactorSection">
					<h3>Two-Factor Authentication</h3>
					<div id="2faSectionOptions">
						<div id="2fa_not_enabled">
							<p>Enable 2FA for an extra layer of security.</p>
							<button id="enable2FA">Enable 2FA</button>
						</div>
						<div id="2fa_is_enabled">
							<p>You can Disable or Change 2FA method as Follows:</p>
							<button id="disable2FA">Disable 2FA</button>
							<button id="change2FA" style="margin-top: 10px;">Change 2FA Method</button>
						</div>
					</div>

					<!-- 2FA Method Selection -->
					<div id="2faSetup">
						<label for="method">Select a 2FA Method:</label>
						<select id="method">
							<option value="totp">Authenticator App</option>
							<option value="sms">SMS</option>
							<option value="email">Email</option>
						</select>
						<button id="selectMethod">Next</button>
					</div>

					<!-- Authenticator App Setup -->
					<div id="authenticatorSetup" style="display: none;">
						<h3>Scan the QR Code and Verify</h3>
						<img id="qrCodeImage" alt="QR Code to scan" />
						<p>Scan the QR code with your authenticator app. Enter the code generated by the app below:</p>
						<form id="verifyAuthenticatorForm">
							<label for="otpCode">Enter Code:</label>
							<input type="text" id="otpCode" name="otpCode" required />
							<button type="submit">Verify</button>
						</form>
					</div>
					<p id="2faStatus"></p>
					

					<!-- SMS Setup -->
					<div id="smsSetup" style="display: none;">
						<div id="enterPhoneNum" style="display: inherit;">
							<label for="phoneNumber">Enter your phone number:</label>
							<input type="text" id="phoneNumber">
							<button id="savePhoneNumber">Save</button>
						</div>
						<div id="sendSMSCodeButton" style="display: inherit;">
							<!-- <button id="sendSmsCode">Send Code</button> -->
							<label for="smsCode">Enter the received code:</label>
							<input type="text" id="smsCode">
							<button id="verifySms">Verify</button>
						</div>
					</div>

					<!-- Email Setup -->
					<div id="emailSetup" style="display: none;">
						<p>We have sent a code to your email address.</p>
						<label for="emailCode">Enter the code:</label>
						<input type="text" id="emailCode">
						<button id="verifyEmail">Verify</button>
					</div>
				</div>
			</div>
        </div>
    </div>
</body>


<script>
	

	// *********************************** Global Variables ***********************************

		let refreshTimer;
		let user_id = '';
		let TwoFA = localStorage.getItem('TwoFA') === 'true'; // Get the 2FA status from local storage
		let chatSocket = null;
		let onlineUsers = {}; // Store online user status
		let globalChatRoomId = null; // Store the chat room ID
	// *********************************** Helper Functions ***********************************
		// Ensure this function is called once the DOM is fully loaded
		document.addEventListener("DOMContentLoaded", function() {
			// OAuth Login
			if (localStorage.getItem('oauthLogin') === 'true') {
				localStorage.removeItem('oauthLogin'); // Remove flag
				checkAuthAndLoadDashboard();
			}
			if (localStorage.getItem('isAuthenticated') === 'true') {
				update2FASection(TwoFA); // Call the function with the appropriate TwoFA status
			}

		});

	// *********************************** OAuth Login Logic ***********************************
		// Login with 42
		function loginWith42() {
			localStorage.setItem('oauthLogin', 'true');
			window.location.href = "/auth/api/42/login/"; // Redirects to 42 OAuth login
		}

		// ✅ Optimized: Check authentication and load dashboard
		async function checkAuthAndLoadDashboard() {
			try {
				const response = await fetch('/auth/api/profile/', {
					method: 'GET',
					credentials: 'include' // ✅ Sends HTTP-only cookies
				});

				if (response.ok) {
					const userData = await response.json();
					console.log("OAuth Login successful:", userData);

					// ✅ Store authentication state in local storage
					localStorage.setItem('username', userData.username);
					localStorage.setItem('userId', userData.id);
					localStorage.setItem('isAuthenticated', 'true');
					localStorage.setItem('oauthLogin', 'true');

					// ✅ Load dashboard
					loadDashboard();
				} else {
					console.warn("User not authenticated, redirecting...");
				}
			} catch (error) {
				console.error("Error checking OAuth authentication:", error);
				window.location.href = "/auth/register";
			}
		}


	// *********************************** Token Refresh Logic ***********************************
	
		// Function to get the CSRF token from the cookie
		function getCookie(name) {
			let cookieValue = null;
			if (document.cookie && document.cookie !== '') {
				const cookies = document.cookie.split(';');
				for (let i = 0; i < cookies.length; i++) {
					const cookie = cookies[i].trim();
					if (cookie.substring(0, name.length + 1) === (name + '=')) {
						cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
						break;
					}
				}
			}
			return cookieValue;
		}

		// Function to start the token refresh timer
		function startTokenRefreshTimer() {
			const refreshInterval = 4 * 60 * 1000; // 1 minute in milliseconds

			refreshTimer = setInterval(() => {
				// Use absolute path to avoid relative path issues
				const apiUrl = '/auth/api/renew-access/';
				fetch(apiUrl, {
					method: 'POST',
					credentials: 'include',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken'), // Include the CSRF token in the header
					},
				})
				.then(response => {
					if (response.ok) {
						console.log('Token refreshed successfully');
					} else {
						console.error('Failed to refresh token. Logging out.');
						logoutUser(); // Call the logout logic
					}
				})
				.catch(error => {
					console.error('Error refreshing token:', error);
				});
			}, refreshInterval);
		}

		// Function to stop the token refresh timer
		function stopTokenRefreshTimer() {
			if (refreshTimer) {
				clearInterval(refreshTimer);
				console.log('Token refresh timer stopped');
			}
		}


	// *********************************** Authentication Logic ***********************************
		// Register User
		document.getElementById('registerForm').addEventListener('submit', async function (e) {
			e.preventDefault();

			const username = document.getElementById('reg_username').value;
			const email = document.getElementById('reg_email').value;
			const password = document.getElementById('reg_password').value;

			try {
				const response = await fetch(`/auth/api/register/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ username, email, password }),
				});
				if (response.ok) {
					const data = await response.json();
					alert(data.message || 'Registration successful!');
					document.getElementById('registerForm').reset();
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Registration failed!');
				}
				
			} catch (error) {
				alert('An error occurred during registration.');
			}
		});
		//*********************************** Login Logic ***********************************
		// Login User
		document.getElementById('loginForm').addEventListener('submit', async function (e) {
			e.preventDefault();

			const username = document.getElementById('login_username').value;
			const password = document.getElementById('login_password').value;

			// Check if OTP is enabled
			const otpMethod = document.getElementById('otp_method').value;
    		const otpCode = document.getElementById('otp_code').value;

			// Prepare the payload
			const payload = { username, password };
			if (otpMethod && otpCode) {
				payload.method = otpMethod;
				payload.otp_code = otpCode;
			}
			
			try {
				document.getElementById('loginButton').disabled = true; // Disable button
				// console.log("payload in login: ", payload);

				const response = await fetch(`/auth/api/login/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(payload),
					credentials: 'include' // To include cookies in the request
				});

				if (response.ok) {
					const data = await response.json();
					const user_id = data.user_id;
					localStorage.setItem('username', username);
					localStorage.setItem('userId', user_id);
					localStorage.setItem('isAuthenticated', 'true');
					if (otpMethod && otpCode) {
						localStorage.setItem('otpMethod', 'true');
					} else {
						localStorage.setItem('otpMethod', 'false');
					}
					alert('Login successful');
                    // console.log(username, 'Login successful:', data);
    				document.getElementById('otp_method').value = '';
            		document.getElementById('otp_code').value = ''; // Clear OTP code
					loadDashboard();
				} else if (response.status === 401 && response.headers.get('X-2FA-Required')) {
            		// If 2FA is required, show OTP section
					errorData = await response.json();
					console.log("Data:", errorData);
            		document.getElementById('otpSection').style.display = 'block';
					document.getElementById('otp_method').style.display = 'none';
					method = errorData.method;
					document.getElementById('otp_method').value = method;
					console.log("otpMethod: ", otpMethod);
					document.getElementById('msg').innerHTML = `2FA verification required. A new code is in your <strong>${method}</strong> Method.`;

            		alert('2FA verification required. Please enter your OTP code.');
					
					// Clear old OTP code and refocus the input field
    				document.getElementById('otp_code').value = '';
    				document.getElementById('otp_code').focus();
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Login failed!');
					// Clear fields after failed login
					document.getElementById('login_username').value = '';
            		document.getElementById('login_password').value = '';
    				document.getElementById('otp_method').value = '';
            		document.getElementById('otp_code').value = ''; // Clear OTP code
				}
			} catch (error) {
				alert('An error occurred during login.');
                console.error('Error during login:', error);
				
				// Clear fields after error
				document.getElementById('login_username').value = '';
        		document.getElementById('login_password').value = '';
				document.getElementById('otp_method').value = '';
        		document.getElementById('otp_code').value = ''; // Clear OTP code
			} 
			finally {
				document.getElementById('loginButton').disabled = false; // Re-enable button
			}
		});

		//*********************************** Logout Logic ***********************************
		// Logout User
		async function logoutUser() {
			stopTokenRefreshTimer(); // Stop the refresh timer
			try {
				const response = await fetch(`/auth/api/logout/`, {
					method: 'POST',
					credentials: 'include',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken'), // Include the CSRF token in the header
					},
				});

				if (response.ok) {
					// Logout succeeded
					alert('You have been logged out.');
				} else {
					console.error('Failed to notify server about logout:', response.status);
				}
			} catch (error) {
				console.error('Error during logout request:', error);
			} finally {
				localStorage.removeItem('username');
				localStorage.removeItem('isAuthenticated');
				localStorage.removeItem('otpMethod');
				localStorage.removeItem('userId');
				localStorage.removeItem('phoneNumber');
				localStorage.removeItem('TwoFA');
				localStorage.removeItem('oauthLogin');
				if (chatSocket && chatSocket.readyState === WebSocket.OPEN) {
					chatSocket.close();
				}
				chatRoomId = null;
				user_id = '';
				onlineUsers = {};
				showAuthSection(); // Redirect to authentication page
			}
		}

		// Bind the logout button to the reusable logout logic
		document.getElementById('logoutButton').addEventListener('click', logoutUser);


		window.addEventListener('load', function () {
			const isAuthenticated = localStorage.getItem('isAuthenticated');
			const username = localStorage.getItem('username');
			if (isAuthenticated === 'true' && username) {
				loadDashboard();
			} else {
				showAuthSection();
			}
		});

		// Show Authentication Section
		function showAuthSection() {
			// console.log("in showAuthSection");
			document.getElementById('authSection').style.display = 'block';
			document.getElementById('dashboard').style.display = 'none';
		}

// *********************************** Dashboard Logic ***********************************

		// Load Dashboard
		function loadDashboard() {
			if (localStorage.getItem('oauthLogin') == 'true') {
				document.getElementById('twoFactorSection').style.display = 'none';				
			}
			startTokenRefreshTimer(); // Start refreshing tokens
			document.getElementById('login_username').value = '';
        	document.getElementById('login_password').value = '';
        	document.getElementById('otp_code').value = ''; // Clear OTP code
			document.getElementById('welcomeMessage').innerText = `Welcome, ${localStorage.getItem('username')}`;
			document.getElementById('authSection').style.display = 'none';
			document.getElementById('dashboard').style.display = 'block';
			fetchOnlineUsers();
			fetchFriendRequests();
			fetchFriends();
			fetchProfile(); // Fetch profile details when the dashboard loads
			initializeChatWebSocket();

		}

	// *********************************** Fetch Online Users ***********************************
		// Fetch Online Users
		async function fetchOnlineUsers() {
			try {
				const response = await fetch('/chat/api/online-users/');
				const data = await response.json();
				const userList = document.getElementById('userList');
				userList.innerHTML = '';
				data.forEach(targetUser => {
					const userItem = document.createElement('li');
					userItem.textContent = targetUser.username;
					userItem.dataset.userId = targetUser.id;
					const friendButton = document.createElement('button');
					friendButton.textContent = 'Send Friend Request';

					friendButton.addEventListener('click', () => sendFriendRequest(targetUser.id));
					userItem.appendChild(friendButton);
					userList.appendChild(userItem);
				});
			} catch (error) {
				console.error('Error fetching users:', error);
			}
		}


	// *********************************** Fetch Friend Request and Friends Logic ***********************************
		async function sendFriendRequest(userId) {
			try {
				const response = await fetch(`/chat/api/send-friend-request/${userId}/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',  // Ensure content type is set
						'X-CSRFToken': getCookie('csrftoken')  // Include the CSRF token in the headers
					},
					credentials: 'include'  // Ensure cookies are sent with the request
				});
				const data = await response.json();
				alert(data.message || 'Friend request sent.');
			} catch (error) {
				console.error('Error sending friend request:', error);
			}
		}

		// Fetch Friend Requests
		async function fetchFriendRequests() {
			try {
				const response = await fetch('/chat/api/friend-requests/');
	
				const data = await response.json();
				const requestsList = document.getElementById('friendRequests');
				requestsList.innerHTML = '';
				// console.log("section: ", requestsList);
				
				data.forEach(request => {
					const requestItem = document.createElement('li');
					requestItem.textContent = `${request.from_user} wants to be your friend`;
	
					const acceptButton = document.createElement('button');
					acceptButton.textContent = 'Accept';
					acceptButton.addEventListener('click', () => acceptFriendRequest(request.id));
					
					requestItem.appendChild(acceptButton);
					requestsList.appendChild(requestItem);
				});
			} catch (error) {
				console.error('Error fetching friend requests:', error);
			}
		}

		// Accept Friend Request
		async function acceptFriendRequest(requestId) {
			try {
				const response = await fetch(`/chat/api/accept-friend-request/${requestId}/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json', // Ensure content type is set
						'X-CSRFToken': getCookie('csrftoken'), // Include the CSRF token in the header
					},
					credentials: 'include', // Ensure cookies are sent with the request
				});
				const data = await response.json();
				alert(data.message || 'Friend request accepted.');
				fetchFriendRequests();
			} catch (error) {
				console.error('Error accepting friend request:', error);
			}
		}

	// *********************************** Fetch Friends ***********************************
		// Fetch Friend List
		async function fetchFriends() {
			try {
				const response = await fetch('/chat/api/friends/');
	
				const data = await response.json();
				const friendList = document.getElementById('friendList');
				friendList.innerHTML = '';
	
				data.forEach(friend => {
					const friendItem = document.createElement('li');
					friendItem.textContent = friend.username;
					friendItem.dataset.userId = friend.id;
					friendList.appendChild(friendItem);
				});
			} catch (error) {
				console.error('Error fetching friends:', error);
			}
		}

	// *********************************** Profile and 2FA Logic ***********************************

		// *********************************** Profile Logic ***********************************
		// Profile Picture Preview
		document.getElementById('profilePicture').addEventListener('change', function (event) {
			const file = event.target.files[0];
			if (file) {
				const reader = new FileReader();
				reader.onload = function (e) {
					document.getElementById('profilePicturePreview').src = e.target.result;
				};
				reader.readAsDataURL(file);
			}
		});

		// Fetch Profile
		async function fetchProfile() {
			try {
				const response = await fetch('/auth/api/profile/');
				if (response.ok) {
					const profile = await response.json();

					// Update bio
					document.getElementById('profileBio').value = profile.bio || '';
					document.getElementById('profilePhone').value = profile.phone_number || '';

					// Display profile picture if it exists
					if (profile.profile_picture) {
						const profileImage = document.getElementById('profilePicturePreview');
						profileImage.src = profile.profile_picture;
						profileImage.style.display = 'block'; // Show the image
					} else {
						// Hide the image if no profile picture is available
						document.getElementById('profilePicturePreview').style.display = 'none';
					}

					// Determine if 2FA is enabled
					TwoFA = profile.is_2fa_enabled || false;
					localStorage.setItem('TwoFA', TwoFA); //assume 2FA is disabled
					update2FASection(TwoFA);

					const phoneNumber = profile.phone_number || '';
					localStorage.setItem('phoneNumber', phoneNumber);
					// console.log("phoneNumber: ", phoneNumber);
				} else {
					console.error('Failed to fetch profile:', response.status);
				}
			} catch (error) {
				console.error('Error fetching profile:', error);
			}
		}

		// Update Profile
		document.getElementById('profileForm').addEventListener('submit', async function (event) {
			event.preventDefault();
			const bio = document.getElementById('profileBio').value;
			const profilePicture = document.getElementById('profilePicture').files[0];
			const phone = document.getElementById('profilePhone').value;

			// console.log("phone in profile: ", phone);
			const formData = new FormData();
			formData.append('bio', bio);
			formData.append('phone_number', phone);
			if (profilePicture) {
				formData.append('profile_picture', profilePicture);
			}

			try {
				const response = await fetch('/auth/api/profile/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken')  // Include the CSRF token in the headers
					},
					body: formData
				});
				if (response.ok) {
					const updatedProfile = await response.json();
					alert('Profile updated successfully!');
				} else {
					console.error('Failed to update profile:', response.status);
				}
			} catch (error) {
				console.error('Error updating profile:', error);
			}
		});


		// *********************************** 2FA Logic ***********************************
		// phone number validation
		function isValidPhoneNumber(phoneNumber) {
			// Regex pattern to validate phone number (adjust as needed)
			const phonePattern = /^\+?[1-9]\d{1,14}$/;
			return phonePattern.test(phoneNumber);
		}

		// select sms method
		async function selectSMS2FAMethod(method, phoneNumber) {
			document.getElementById('smsSetup').style.display = 'block';

			try {
				const response = await fetch('/auth/api/select-2fa-method/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken'),
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ method, phone_number: phoneNumber })
				});

				if (response.ok) {
					const data = await response.json();
					document.getElementById('sendSMSCodeButton').style.display = 'block';
					document.getElementById('enterPhoneNum').style.display = 'none';
					alert('Your code is sent. Please enter the received code.');
					document.getElementById('2faSetup').style.display = 'none';
				} else if (response.status === 400) {
					const errorData = await response.json();
					if (errorData.phone_number) {
						alert(errorData.phone_number.join('\n'));
						document.getElementById('phoneNumber').value = ''; // Clear the input box
						document.getElementById('sendSMSCodeButton').style.display = 'none';
						document.getElementById('enterPhoneNum').style.display = 'block';
					} else if (errorData.error) { // Twilio error
						alert(errorData.error);
					}
				} else {
					console.error('Failed to select 2FA method:', response.status);
				}
			} catch (error) {
				console.error('Error selecting 2FA method:', error);
			}
		}

		// Select and change 2FA Method
		async function change2FAMethod() {
			document.getElementById('2faSetup').style.display = 'block';
			document.getElementById('phoneNumber').value = localStorage.getItem('phoneNumber');

			document.getElementById('selectMethod').addEventListener('click', async function () {
				const method = document.getElementById('method').value;
				console.log("Selected method: ", method);

				// Hide all setups initially
				document.getElementById('smsSetup').style.display = 'none';
				document.getElementById('emailSetup').style.display = 'none';
				document.getElementById('authenticatorSetup').style.display = 'none';

				if (method === 'sms') {
					let phoneNumber = document.getElementById('phoneNumber').value;

					if (isValidPhoneNumber(phoneNumber)) {
						selectSMS2FAMethod(method, phoneNumber);
					} 
					else {
						alert('Please add a valid phone number to enable SMS 2FA.');
						document.getElementById("smsSetup").style.display = 'block';
						document.getElementById('enterPhoneNum').style.display = 'block';
						document.getElementById('sendSMSCodeButton').style.display = 'none';

						document.getElementById('savePhoneNumber').addEventListener('click', async function () {
							phoneNumber = document.getElementById('phoneNumber').value;
							if (isValidPhoneNumber(phoneNumber)) {
								// phoneNumber = localStorage.getItem('phoneNumber');
								try {
									const response = await fetch('/auth/api/profile/', {
										method: 'POST',
										headers: {
											'X-CSRFToken': getCookie('csrftoken'),
											'Content-Type': 'application/json'
										},
										body: JSON.stringify({ phone_number: phoneNumber })
									});

									if (response.ok) {
										document.getElementById('enterPhoneNum').style.display = 'none';
										document.getElementById('sendSMSCodeButton').style.display = 'block';
										alert('Your phone number is saved. Your code is sent. Please enter the received code.');
										selectSMS2FAMethod(method, phoneNumber);
									} else if (response.status === 400) {
										const errorData = await response.json();
										if (errorData.phone_number) {
											alert(errorData.phone_number.join('\n'));
											document.getElementById('phoneNumber').value = ''; // Clear the input box
										}
									} else {
										console.error('Failed to save phone number:', response.status);
									}
								} catch (error) {
									console.error('Error saving phone number:', error);
								}
							} else {
								alert('Please enter a valid phone number.');
								document.getElementById('phoneNumber').value = ''; // Clear the input box
							}
						});
					}
				}
				else {
					try {
						const response = await fetch('/auth/api/select-2fa-method/', {
							method: 'POST',
							headers: {
								'X-CSRFToken': getCookie('csrftoken'),
								'Content-Type': 'application/json'
							},
							body: JSON.stringify({ method })
						});

						if (response.ok) {
							const data = await response.json();

							if (method === 'totp') {
								// Convert the hexadecimal string to a Base64-encoded string
								const hex = data.qr_code;
								const binary = new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
								const base64 = btoa(String.fromCharCode.apply(null, binary));

								// Create a data URI and display the QR code
								const qrCodeImage = document.getElementById('qrCodeImage');
								qrCodeImage.src = `data:image/png;base64,${base64}`;
								document.getElementById('authenticatorSetup').style.display = 'block';
								alert('Scan the QR code with your authenticator app.');
							} else if (method === 'email') {
								document.getElementById('emailSetup').style.display = 'block';
								alert('We have sent a code to your email address.');
							}
							document.getElementById('2faSetup').style.display = 'none';
						} else {
							console.error('Failed to select 2FA method:', response.status);
						}
					} catch (error) {
						console.error('Error selecting 2FA method:', error);
					}
				}
			}); // Ensure the event listener is added only once
		}

		// Update the 2FA Section
		function update2FASection(TwoFA) {
			if (TwoFA) {
				document.getElementById('2fa_not_enabled').style.display = 'none';
				document.getElementById('2fa_is_enabled').style.display = 'block';
				document.getElementById('disable2FA').addEventListener('click', disable2FA);
				document.getElementById('change2FA').addEventListener('click', change2FAMethod);
				document.getElementById('2faSetup').style.display = 'none';
			} else {
				document.getElementById('2fa_is_enabled').style.display = 'none';
				document.getElementById('2fa_not_enabled').style.display = 'block';
				document.getElementById('enable2FA').addEventListener('click', change2FAMethod);
			}
		}

		// Disable 2FA
		async function disable2FA() {
			try {
				const response = await fetch('/auth/api/disable-2fa/', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken'), // Use your CSRF token retrieval function
					},
					credentials: 'include'  // Ensure cookies are sent with the request
				});

				if (response.ok) {
					alert('2FA has been disabled.');
					document.getElementById('2faStatus').textContent = '';
					fetchProfile(); // Refresh the profile
				} else {
					alert('Failed to disable 2FA.');
				}
			} catch (error) {
				console.error('Error disabling 2FA:', error);
			}
		}

		// verify totp Method
		document.getElementById('verifyAuthenticatorForm').addEventListener('submit', async function (event) {
			event.preventDefault();

			const otpCode = document.getElementById('otpCode').value;

			try {
				const response = await fetch('/auth/api/verify-2fa-setup/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken'),
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						method: 'totp',
						code: otpCode
					})
				});

				if (response.ok) {
					const data = await response.json();
					alert(data.message || '2FA setup successfully verified!');
					// Optionally, redirect the user or update the UI
					document.getElementById('authenticatorSetup').style.display = 'none';
					document.getElementById('2faStatus').textContent = '2FA is now enabled!';
					fetchProfile(); // Refresh the profile
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Failed to verify 2FA setup. Please try again.');
				}
			} catch (error) {
				console.error('Error verifying 2FA setup:', error);
				alert('An unexpected error occurred. Please try again.');
			}
		});
		
		// verify SMS Code
		document.getElementById('verifySms').addEventListener('click', async function () {
			const smsCode = document.getElementById('smsCode').value;

			if (!smsCode) {
				alert('Please enter the received code.');
				return;
			}

			try {
				const response = await fetch('/auth/api/verify-2fa-setup/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken'),
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ 
						method: 'sms',
						 code: smsCode
					})
				});

				if (response.ok) {
					const data = await response.json();
					alert(data.message || 'SMS verification successful!');
					// Refresh the screen after successful verification
					document.getElementById('smsSetup').style.display = 'none';
					document.getElementById('2faStatus').textContent = '2FA is now enabled!';
					fetchProfile();
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Failed to verify email code. Please try again.');
				}
			} catch(error) {
					console.error('Error verifying SMS code:', error);
					alert('An unexpected error occurred. Please try again.');
				}
		});

		// Verify Email Code
		document.getElementById('verifyEmail').addEventListener('click', async function () {
			const emailCode = document.getElementById('emailCode').value;

			if (!emailCode) {
				alert('Please enter the verification code.');
				return;
			}

			try {
				const response = await fetch('/auth/api/verify-2fa-setup/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken'),
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						method: 'email',
						code: emailCode
					})
				});

				if (response.ok) {
					const data = await response.json();
					alert(data.message || '2FA setup successfully verified!');
					// Optionally, redirect the user or update the UI
					document.getElementById('emailSetup').style.display = 'none';
					document.getElementById('2faStatus').textContent = '2FA is now enabled!';
					fetchProfile(); // Refresh the profile
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Failed to verify email code. Please try again.');
				}
			} catch (error) {
				console.error('Error verifying email setup:', error);
				alert('An unexpected error occurred. Please try again.');
			}
		});

	// *********************************** Chat Logic ***********************************
		// chat section

		function initializeChatWebSocket() {
			const currentUserId = localStorage.getItem('userId');
			const currentUsername = localStorage.getItem('username');

			if (!currentUserId || !currentUsername) {
				console.error("User ID or username not found. WebSocket connection aborted.");
				return;
			}

			chatSocket = new WebSocket(`ws://${window.location.host}/ws/chat/`); // General chat connection

			chatSocket.onopen = function () {
				console.log("WebSocket connected.");
			};

			chatSocket.onmessage = function (e) {
				const data = JSON.parse(e.data);

				if (data.type === 'disconnect')
					console.error(`WebSocket connection closed unexpectedly with code: ${data.reason}.`);

				if (data.type === 'online_status') {
					onlineUsers[data.user_id] = data;
					if (!data.is_online) { // Remove the user from onlineUsers if they are offline
         			   delete onlineUsers[data.user_id];
        			}
					console.debug("Online_status received:", data);
					updateOnlineUsersList();
				} else if (data.type === 'user.status') {  // Handle the initial user list
					onlineUsers = data.online_users;       // Update onlineUsers with the initial list
					updateOnlineUsersList();              // Update the UI
				} else if (data.type === 'chat_request') {
					globalChatRoomId = data.chat_room_id;
					console.debug("Chat request received:", data);
					console.log(`target_username: ${data.target_username}, chat_room_id: ${data.chat_room_id}`);
					if (data.creator_id === currentUserId) {
						consol.log(`target_username: ${data.target_username}, chat_room_id: ${data.chat_room_id}`);
						startChat(data.target_id, data.target_username, globalChatRoomId);
					} else if (data.target_id === currentUserId) {
						console.log(`creator_username: ${data.creator_username}, chat_room_id: ${data.chat_room_id}`);
						showIncomingMessagePopup(data.creator_id, data.creator_username, data.message, globalChatRoomId);
					}
				} else if (data.type === 'chat_message') {
					globalChatRoomId = data.chat_room_id;
					console.log("Message received:", data);
					displayMessageInChat(data.sender_id, data.sender, data.message, data.timestamp, data.is_read);
				} else if (data.type === 'user.status') { // initial online users list
					onlineUsers = data.online_users;
					updateOnlineUsersList();
				}
			};

			chatSocket.onclose = function () {
				console.error("WebSocket connection closed.");
				console.log("Reconnecting...");
				// Clear online users list on disconnect (optional)
				onlineUsers = {};
				updateOnlineUsersList();
			};

			chatSocket.onerror = function (error) {
			console.error("WebSocket error:", error);
			}
		}

		function updateOnlineUsersList() {
			const currentUserId = localStorage.getItem('userId');
			const currentUsername = localStorage.getItem('username');
			const onlineUsersList = document.getElementById('WBuserList');
			onlineUsersList.innerHTML = ''; // Clear the list

			for (const userId in onlineUsers) {
				if (onlineUsers.hasOwnProperty(userId) && onlineUsers[userId] && userId !== currentUserId) {
					const userItem = document.createElement('li');
					userItem.classList.add('chatItem');
					userItem.dataset.userId = userId;
					userItem.dataset.username = onlineUsers[userId].username;

					userItem.textContent = onlineUsers[userId].username;

					// Add the "Start Chat" button:
					const startChatButton = document.createElement('button');
					startChatButton.textContent = 'Start Chat';
					startChatButton.addEventListener('click', () => {
						const message = prompt("Enter your initial message:");
						if (message) {
							chatSocket.send(JSON.stringify({
								type: 'chat_request',
								target_id: userId,
								message: message
							}));
							// Open the chat window or perform other UI updates as needed.
							console.debug('chat room id in updateOnlineUsersList: ', globalChatRoomId);
							startChat(userId, onlineUsers[userId].username, globalChatRoomId); // Call startChat function
							console.log("currentUserId, currentUsername, message: ", currentUserId, currentUsername, message);
							displayMessageInChat(currentUserId, currentUsername, message, null, false, 'first_msg');
						}
					});
					userItem.appendChild(startChatButton); // Append the button to the list item

					onlineUsersList.appendChild(userItem);
				}
			}
		}

		function showIncomingMessagePopup(creatorId, creatorUsername, received_message, chatRoomId) {
			// Check if a popup already exists and remove it
			const existingPopup = document.querySelector('.popup');
			if (existingPopup) {
				existingPopup.remove();
			}

			// Create the popup container
			const popup = document.createElement('div');
			popup.classList.add('popup');

			// Create the popup message
			const message = document.createElement('p');
			message.textContent = `${creatorUsername} sent you a message.`;

			// Create the "Reply" button
			const replyButton = document.createElement('button');
			replyButton.textContent = "Reply";
			replyButton.classList.add('popup-reply');

			// Event listener for reply
			replyButton.addEventListener('click', () => {
				startChat(creatorId, creatorUsername, chatRoomId);
				displayMessageInChat(creatorId, creatorUsername, received_message);
				popup.remove(); // Remove the popup after clicking reply
			});

			// Create a "Close" button
			const closeButton = document.createElement('button');
			closeButton.textContent = "Close";
			closeButton.classList.add('popup-close');

			// Event listener for closing the popup
			closeButton.addEventListener('click', () => {
				popup.remove();
			});

			// Append elements to the popup
			popup.appendChild(message);
			popup.appendChild(replyButton);
			popup.appendChild(closeButton);

			document.body.appendChild(popup);
		}

		function startChat(receiverId, receiverUsername, chatRoomId) {
			const chatArea = document.getElementById('chatArea');
			const chatWith = document.getElementById('chatWith');
			const chatMessages = document.getElementById('chatMessages');

			chatArea.style.display = 'block';
			chatWith.textContent = `Chat with: ${receiverUsername}`;
			chatArea.dataset.userId = receiverId;
			chatMessages.innerHTML = ''; // Clear previous messages

			console.debug("chatRoomId in startChat: ", chatRoomId);
			if (!chatRoomId)
				chatRoomId = globalChatRoomId;

			document.getElementById('sendMessage').onclick = () => sendMessage(receiverId, receiverUsername, globalChatRoomId);
		}

		function sendMessage(receiverId, receiverUsername, chatRoomId) {
			const messageInputDom = document.getElementById('chatInput');
			const message = messageInputDom.value;

			console.debug('chatRoomId in sendMessage: ', chatRoomId);

			if (chatSocket && chatSocket.readyState === WebSocket.OPEN && message.trim() !== '') {

				chatSocket.send(JSON.stringify({
					type: 'chat_message', // Important: Indicate message type
					message: message,
					receiver_id: receiverId,
					chat_room_id: chatRoomId
				}));

				displayMessageInChat(getCurrentUserId(), localStorage.getItem('username'), message); // Display own message
				messageInputDom.value = '';
			} else {
				console.error("WebSocket not connected or message is empty.");
			}
		}

		function displayMessageInChat(senderId, senderName, message, timestamp = null, is_read = false, first_msg = '') {
			const chatMessages = document.getElementById('chatMessages');
			const msg = document.createElement('div');
			msg.textContent = `${senderName}: ${message} ${timestamp ? `(${timestamp})` : ''}`;

			console.debug("the first message value is :", first_msg);
			if (is_read) {
				msg.classList.add('read');
			}
			// I add ridiculous statements of 'first_msg' to only show the first message 
			// sender name after starting chat
			if (senderId === localStorage.getItem('userId') && first_msg !== 'first_msg') {
				msg.classList.add('own');
			} else {
				msg.classList.add('other');
				chatMessages.appendChild(msg);
			}
			chatMessages.scrollTop = chatMessages.scrollHeight;
		}

		function getCurrentUserId() {
			return localStorage.getItem('userId');
		}


	</script>
	
