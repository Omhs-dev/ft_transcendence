<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register / Login</title>
    {% load static %}
    <link rel="stylesheet" href="{% static 'css/register_style.css' %}">
</head>
<body>
    <div class="container">
        <h1 id="welcomeMessage">Welcome</h1>
        <div id="authSection">
            <!-- Registration Form -->
            <div id="registerSection">
                <h2>Register</h2>
                <form id="registerForm">
                    <label for="reg_username">Username:</label>
                    <input type="text" id="reg_username" name="username" required>
                    
                    <label for="reg_email">Email:</label>
                    <input type="email" id="reg_email" name="email" required>
                    
                    <label for="reg_password">Password:</label>
                    <input type="password" id="reg_password" name="password" required>
                    
                    <button type="submit">Register</button>
                </form>
            </div>

			<!-- Login Form -->
			<div id="loginSection">
				<h2>Login</h2>
				<form id="loginForm">
					<label for="login_username">Username:</label>
					<input type="text" id="login_username" name="username" required>
					
					<label for="login_password">Password:</label>
					<input type="password" id="login_password" name="password" required>

					<!-- Hidden OTP Section -->
					<div id="otpSection" style="display: none;">
						<label for="otp_method">2FA Method:</label>
						<select id="otp_method" name="method" required>
							<option value="totp">Authenticator App</option>
							<option value="sms">SMS</option>
							<option value="email">Email</option>
						</select>

						<label for="otp_code">Enter OTP Code:</label>
						<input type="text" id="otp_code" name="otp_code">
					</div>

					<button type="submit" id="loginButton">Login</button>
				</form>
			</div>
		</div>

        <!-- Dashboard Section -->
        <div id="dashboard" style="display: none;">
            <h2>Dashboard</h2>
            <button id="logoutButton">Logout</button>
            
            <!-- Online Users -->
            <div id="onlineUsers">
                <h3>Online Users</h3>
                <ul id="userList"></ul>
            </div>

            <!-- Friends Requests -->
            <div id="friendreq">
                <h3>My Friends Requests</h3>
                <ul id="friendRequests"></ul>
            </div>

            <!-- Friends List -->
            <div id="friendLists">
                <h3>My Friends :</h3>
                <ul id="friendList"></ul>
            </div>


			<!-- Profile Section -->
			<div id="profileSection">
				<h2>Profile</h2>
				<form id="profileForm">
					<label for="profileBio">Bio:</label>
					<textarea id="profileBio" name="bio"></textarea>
					<br>

					<label for="profilePicture">Upload Profile Picture:</label>
					<input type="file" id="profilePicture" name="profile_picture" accept="image/*">
					<br>
					<!-- Profile Picture Preview -->
					<img id="profilePicturePreview" src="{{ profile.profile_picture.url }}" alt="Profile Picture" style="display: none; width: 150px; height: 150px; object-fit: cover; border-radius: 50%; margin-top: 10px;">
			
					<button type="submit">Update Profile</button>
				</form>
				<!-- 2FA Section -->
				<div id="twoFactorSection">
					<h3>Two-Factor Authentication</h3>
					<p id="2famessage">Enable 2FA for an extra layer of security.</p>
					<div id="2faOptions">
						<button id="enable2FA">Enable 2FA</button>
					</div>

					<!-- 2FA Method Selection -->
					<div id="2faSetup" style="display: none;">
						<label for="method">Select a 2FA Method:</label>
						<select id="method">
							<option value="totp">Authenticator App</option>
							<option value="sms">SMS</option>
							<option value="email">Email</option>
						</select>
						<button id="selectMethod">Next</button>
					</div>

					<!-- Authenticator App Setup -->
					<div id="authenticatorSetup" style="display: none;">
						<h3>Scan the QR Code and Verify</h3>
						<img id="qrCodeImage" alt="QR Code to scan" />
						<p>Scan the QR code with your authenticator app. Enter the code generated by the app below:</p>
						<form id="verifyAuthenticatorForm">
							<label for="otpCode">Enter Code:</label>
							<input type="text" id="otpCode" name="otpCode" required />
							<button type="submit">Verify</button>
						</form>
					</div>
					<p id="2faStatus"></p>
					

					<!-- SMS Setup -->
					<div id="smsSetup" style="display: none;">
						<label for="phoneNumber">Enter your phone number:</label>
						<input type="text" id="phoneNumber">
						<button id="sendSmsCode">Send Code</button>
						<label for="smsCode">Enter the received code:</label>
						<input type="text" id="smsCode">
						<button id="verifySms">Verify</button>
					</div>

					<!-- Email Setup -->
					<div id="emailSetup" style="display: none;">
						<p>We have sent a code to your email address.</p>
						<label for="emailCode">Enter the code:</label>
						<input type="text" id="emailCode">
						<button id="verifyEmail">Verify</button>
					</div>
				</div>
			</div>
        </div>
    </div>
</body>


<script>
		let refreshTimer;
		

		// Function to get the CSRF token from the cookie
		function getCookie(name) {
			let cookieValue = null;
			if (document.cookie && document.cookie !== '') {
				const cookies = document.cookie.split(';');
				for (let i = 0; i < cookies.length; i++) {
					const cookie = cookies[i].trim();
					console.log("cookie: ", cookie);
					// Does this cookie string begin with the name we want?
					if (cookie.substring(0, name.length + 1) === (name + '=')) {
						cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
						break;
					}
				}
			}
			console.log("cookie value: ", cookieValue);
			return cookieValue;
		}

		// Function to start the token refresh timer
		function startTokenRefreshTimer() {
			const refreshInterval = 4 * 60 * 1000; // 1 minute in milliseconds

			console.log('Starting token refresh timer');
			refreshTimer = setInterval(() => {
				// Use absolute path to avoid relative path issues
				const apiUrl = '/auth/api/renew-access/';
				console.log(`API URL being called: ${apiUrl}`);

				fetch(apiUrl, {
					method: 'POST',
					credentials: 'include',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken'), // Include the CSRF token in the header
					},
				})
				.then(response => {
					if (response.ok) {
						console.log('Token refreshed successfully');
					} else {
						console.error('Failed to refresh token. Logging out.');
						logoutUser(); // Call the logout logic
					}
				})
				.catch(error => {
					console.error('Error refreshing token:', error);
				});
			}, refreshInterval);
		}

		// Function to stop the token refresh timer
		function stopTokenRefreshTimer() {
			if (refreshTimer) {
				clearInterval(refreshTimer);
				console.log('Token refresh timer stopped');
			}
		}

		// Register User
		document.getElementById('registerForm').addEventListener('submit', async function (e) {
			e.preventDefault();

			const username = document.getElementById('reg_username').value;
			const email = document.getElementById('reg_email').value;
			const password = document.getElementById('reg_password').value;

			try {
				const response = await fetch(`/auth/api/register/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({ username, email, password }),
				});
				if (response.ok) {
					const data = await response.json();
					alert(data.message || 'Registration successful!');
					document.getElementById('registerForm').reset();
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Registration failed!');
				}
				
			} catch (error) {
				alert('An error occurred during registration.');
			}
		});

		// Login User
		document.getElementById('loginForm').addEventListener('submit', async function (e) {
			e.preventDefault();

			const username = document.getElementById('login_username').value;
			const password = document.getElementById('login_password').value;

			// Check if OTP is enabled
			const otpMethod = document.getElementById('otp_method').value;
    		const otpCode = document.getElementById('otp_code').value;

			// Prepare the payload
			const payload = { username, password };
			if (otpMethod && otpCode) {
				payload.method = otpMethod;
				payload.otp_code = otpCode;
			}
			
			try {
				document.getElementById('loginButton').disabled = true; // Disable button
				console.log("payload in login: ", payload);

				const response = await fetch(`/auth/api/login/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(payload),
					credentials: 'include' // To include cookies in the request
				});

				if (response.ok) {
					const data = await response.json();
					// Store username in local storage 
					localStorage.setItem('username', username);
					localStorage.setItem('isAuthenticated', 'true');
					// if (otpMethod && otpCode) {
					// 	localStorage.setItem('otpMethod', 'true');
					// } else {
					// 	localStorage.setItem('otpMethod', 'false');
					// }
					// alert('Login successful');
                    console.log(username, 'Login successful:', data);
    				document.getElementById('otp_method').value = '';
            		document.getElementById('otp_code').value = ''; // Clear OTP code
					loadDashboard();
				} else if (response.status === 401 && response.headers.get('X-2FA-Required')) {
            		// If 2FA is required, show OTP section
            		document.getElementById('otpSection').style.display = 'block';
            		alert('2FA verification required. Please enter your OTP code.');
					
					// Clear old OTP code and refocus the input field
    				document.getElementById('otp_code').value = '';
    				document.getElementById('otp_code').focus();
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Login failed!');
					// Clear fields after failed login
					document.getElementById('login_username').value = '';
            		document.getElementById('login_password').value = '';
    				document.getElementById('otp_method').value = '';
            		document.getElementById('otp_code').value = ''; // Clear OTP code
				}
			} catch (error) {
				alert('An error occurred during login.');
                console.error('Error during login:', error);
				
				// Clear fields after error
				document.getElementById('login_username').value = '';
        		document.getElementById('login_password').value = '';
				document.getElementById('otp_method').value = '';
        		document.getElementById('otp_code').value = ''; // Clear OTP code
			} 
			finally {
				document.getElementById('loginButton').disabled = false; // Re-enable button
			}
		});

		// Logout User
		async function logoutUser() {
			stopTokenRefreshTimer(); // Stop the refresh timer
			try {
				const response = await fetch(`/auth/api/logout/`, {
					method: 'POST',
					credentials: 'include',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken'), // Include the CSRF token in the header
					},
				});

				if (response.ok) {
					// Logout succeeded
					alert('You have been logged out.');
				} else {
					console.error('Failed to notify server about logout:', response.status);
				}
			} catch (error) {
				console.error('Error during logout request:', error);
			} finally {
				// Cleanup local data and redirect to login page
				localStorage.removeItem('username');
				localStorage.removeItem('isAuthenticated');
				localStorage.removeItem('otpMethod');
				showAuthSection(); // Redirect to authentication page
			}
		}

		// Bind the logout button to the reusable logout logic
		document.getElementById('logoutButton').addEventListener('click', logoutUser);


		window.addEventListener('load', function () {
			const isAuthenticated = localStorage.getItem('isAuthenticated');
			const username = localStorage.getItem('username');
			if (isAuthenticated === 'true' && username) {
				loadDashboard();
			} else {
				showAuthSection();
			}
		});

		// Show Authentication Section
		function showAuthSection() {
			console.log("in showAuthSection");
			document.getElementById('authSection').style.display = 'block';
			document.getElementById('dashboard').style.display = 'none';
		}

		// Load Dashboard
		function loadDashboard() {
			startTokenRefreshTimer(); // Start refreshing tokens
			document.getElementById('login_username').value = '';
        	document.getElementById('login_password').value = '';
        	document.getElementById('otp_code').value = ''; // Clear OTP code
			document.getElementById('welcomeMessage').innerText = `Welcome, ${localStorage.getItem('username')}`;
			document.getElementById('authSection').style.display = 'none';
			document.getElementById('dashboard').style.display = 'block';
			fetchOnlineUsers();
			fetchFriendRequests();
			fetchFriends();
			fetchProfile(); // Fetch profile details when the dashboard loads
		}

		// Profile Picture Preview
		document.getElementById('profilePicture').addEventListener('change', function (event) {
			// console.log("event : ");
			
			const file = event.target.files[0];
			if (file) {
				const reader = new FileReader();
				reader.onload = function (e) {
					document.getElementById('profilePicturePreview').src = e.target.result;
				};
				reader.readAsDataURL(file);
			}
		});

		// Update the 2FA Section
		function update2FASection(optMethod) {
			const twoFactorSection = document.getElementById('twoFactorSection');
			const twoFactorOptions = document.getElementById('2faOptions');
			const twoFactorMwssage = document.getElementById('2famessage');

			// Clear previous options
			twoFactorOptions.innerHTML = '';

			if (optMethod) {
				// If 2FA is enabled
				twoFactorOptions.innerHTML = `
					<button id="disable2FA" style="margin-top: 10px;">Disable 2FA</button>
					<button id="change2FA" style="margin-top: 10px;">Change 2FA Method</button>
				`;
				twoFactorMwssage.textContent = 'You can Disable or Change 2FA method as Follows:';
				document.getElementById('disable2FA').addEventListener('click', disable2FA);
				document.getElementById('change2FA').addEventListener('click', () => {
					document.getElementById('2faSetup').style.display = 'block';
				});
			} else {
				// If 2FA is not enabled
				twoFactorOptions.innerHTML = `<button id="enable2FA">Enable 2FA</button>`;
				twoFactorMwssage.textContent = 'Enable 2FA for an extra layer of security.';
				document.getElementById('enable2FA').addEventListener('click', () => {
					document.getElementById('2faSetup').style.display = 'block';
				});
			}
		}

		// Fetch Profile
		async function fetchProfile() {
			try {
				const response = await fetch('/auth/api/profile/');
				if (response.ok) {
					const profile = await response.json();

					// Update bio
					document.getElementById('profileBio').value = profile.bio || '';

					// Display profile picture if it exists
					if (profile.profile_picture) {
						const profileImage = document.getElementById('profilePicturePreview');
						profileImage.src = profile.profile_picture;
						profileImage.style.display = 'block'; // Show the image
					} else {
						// Hide the image if no profile picture is available
						document.getElementById('profilePicturePreview').style.display = 'none';
					}

					// Determine if 2FA is enabled
					const otpMethod = profile.is_2fa_enabled || false; //assume 2FA is disabled
					console.log("otpMethod in the fetch profile: ", otpMethod);
					// Update the 2FA section based on the status
					update2FASection(otpMethod);
				} else {
					console.error('Failed to fetch profile:', response.status);
				}
			} catch (error) {
				console.error('Error fetching profile:', error);
			}
		}

		// Update Profile
		document.getElementById('profileForm').addEventListener('submit', async function (event) {
			event.preventDefault();
			const bio = document.getElementById('profileBio').value;
			const profilePicture = document.getElementById('profilePicture').files[0];

			const formData = new FormData();
			formData.append('bio', bio);
			if (profilePicture) {
				formData.append('profile_picture', profilePicture);
			}

			try {
				const response = await fetch('/auth/api/profile/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken')  // Include the CSRF token in the headers
					},
					body: formData,
				});

				console.log("cookie in selectMethod: ", getCookie('csrftoken'));

				if (response.ok) {
					const updatedProfile = await response.json();
					alert('Profile updated successfully!');
				} else {
					console.error('Failed to update profile:', response.status);
				}
			} catch (error) {
				console.error('Error updating profile:', error);
			}
		});

		// Enable 2FA	
		document.getElementById('enable2FA').addEventListener('click', function () {
			document.getElementById('2faSetup').style.display = 'block';
		});


		// Disable 2FA
		async function disable2FA() {
			try {
				const response = await fetch('/auth/api/disable-2fa/', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken'), // Use your CSRF token retrieval function
					},
					credentials: 'include'  // Ensure cookies are sent with the request
				});

				if (response.ok) {
					alert('2FA has been disabled.');
					fetchProfile(); // Refresh the profile
				} else {
					alert('Failed to disable 2FA.');
				}
			} catch (error) {
				console.error('Error disabling 2FA:', error);
			}
		}

		// Select 2FA Method
		document.getElementById('selectMethod').addEventListener('click', async function () {
			const method = document.getElementById('method').value;

			try {
				const response = await fetch('/auth/api/select-2fa-method/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken'),
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ method })
				});

				

				if (response.ok) {
					const data = await response.json();

					if (method === 'totp') {
						// Convert the hexadecimal string to a Base64-encoded string
						const hex = data.qr_code;
						const binary = new Uint8Array(hex.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));
						const base64 = btoa(String.fromCharCode.apply(null, binary));

						// Create a data URI and display the QR code
						const qrCodeImage = document.getElementById('qrCodeImage');
						qrCodeImage.src = `data:image/png;base64,${base64}`;
						document.getElementById('authenticatorSetup').style.display = 'block';
					} else if (method === 'sms') {
						document.getElementById('smsSetup').style.display = 'block';
					} else if (method === 'email') {
						document.getElementById('emailSetup').style.display = 'block';
					}
					document.getElementById('2faSetup').style.display = 'none';
				} else {
					console.error('Failed to select 2FA method:', response.status);
				}
			} catch (error) {
				console.error('Error selecting 2FA method:', error);
			}
		});

		// verify totp Method
		document.getElementById('verifyAuthenticatorForm').addEventListener('submit', async function (event) {
			event.preventDefault();

			const otpCode = document.getElementById('otpCode').value;

			try {
				const response = await fetch('/auth/api/verify-2fa-setup/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken'),
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						method: 'totp',
						code: otpCode
					})
				});

				if (response.ok) {
					const data = await response.json();
					alert(data.message || '2FA setup successfully verified!');
					// Optionally, redirect the user or update the UI
					document.getElementById('authenticatorSetup').style.display = 'none';
					document.getElementById('2faStatus').textContent = '2FA is now enabled!';
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Failed to verify 2FA setup. Please try again.');
				}
			} catch (error) {
				console.error('Error verifying 2FA setup:', error);
				alert('An unexpected error occurred. Please try again.');
			}
		});

		// Verify Email Code
		document.getElementById('verifyEmail').addEventListener('click', async function () {
			const emailCode = document.getElementById('emailCode').value;

			if (!emailCode) {
				alert('Please enter the verification code.');
				return;
			}

			try {
				const response = await fetch('/auth/api/verify-2fa-setup/', {
					method: 'POST',
					headers: {
						'X-CSRFToken': getCookie('csrftoken'),
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						method: 'email',
						code: emailCode
					})
				});

				if (response.ok) {
					const data = await response.json();
					alert(data.message || '2FA setup successfully verified!');
					// Optionally, redirect the user or update the UI
					document.getElementById('emailSetup').style.display = 'none';
					document.getElementById('2faStatus').textContent = '2FA is now enabled!';
				} else {
					const errorData = await response.json();
					alert(errorData.error || 'Failed to verify email code. Please try again.');
				}
			} catch (error) {
				console.error('Error verifying email setup:', error);
				alert('An unexpected error occurred. Please try again.');
			}
		});



		// Fetch Online Users
		async function fetchOnlineUsers() {
			try {
				const response = await fetch('/chat/api/online-users/');

				const data = await response.json();
				const userList = document.getElementById('userList');
				userList.innerHTML = '';
	
				data.forEach(user => {
					const userItem = document.createElement('li');
					userItem.textContent = user.username;
					userItem.dataset.userId = user.id;
	
					const friendButton = document.createElement('button');
					friendButton.textContent = 'Send Friend Request';
					friendButton.addEventListener('click', () => sendFriendRequest(user.id));
	
					userItem.appendChild(friendButton);
					userList.appendChild(userItem);
				});
			} catch (error) {
				console.error('Error fetching users:', error);
			}
		}

		async function sendFriendRequest(userId) {
			try {
				const response = await fetch(`/chat/api/send-friend-request/${userId}/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',  // Ensure content type is set
						'X-CSRFToken': getCookie('csrftoken')  // Include the CSRF token in the headers
					},
					credentials: 'include'  // Ensure cookies are sent with the request
				});
				const data = await response.json();
				alert(data.message || 'Friend request sent.');
			} catch (error) {
				console.error('Error sending friend request:', error);
			}
		}

		// Fetch Friend Requests
		async function fetchFriendRequests() {
			try {
				const response = await fetch('/chat/api/friend-requests/');
	
				const data = await response.json();
				const requestsList = document.getElementById('friendRequests');
				requestsList.innerHTML = '';
				console.log("section: ", requestsList);
				
				data.forEach(request => {
					const requestItem = document.createElement('li');
					requestItem.textContent = `${request.from_user} wants to be your friend`;
	
					const acceptButton = document.createElement('button');
					acceptButton.textContent = 'Accept';
					acceptButton.addEventListener('click', () => acceptFriendRequest(request.id));
	
					requestItem.appendChild(acceptButton);
					requestsList.appendChild(requestItem);
				});
			} catch (error) {
				console.error('Error fetching friend requests:', error);
			}
		}

		// Accept Friend Request
		async function acceptFriendRequest(requestId) {
			try {
				const response = await fetch(`/chat/api/accept-friend-request/${requestId}/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json', // Ensure content type is set
						'X-CSRFToken': getCookie('csrftoken'), // Include the CSRF token in the header
					},
					credentials: 'include', // Ensure cookies are sent with the request
				});
				const data = await response.json();
				alert(data.message || 'Friend request accepted.');
				fetchFriendRequests();
			} catch (error) {
				console.error('Error accepting friend request:', error);
			}
		}

		// Fetch Friend List
		async function fetchFriends() {
			try {
				const response = await fetch('/chat/api/friends/');
	
				const data = await response.json();
				const friendList = document.getElementById('friendList');
				friendList.innerHTML = '';
	
				data.forEach(friend => {
					const friendItem = document.createElement('li');
					friendItem.textContent = friend.username;
					friendItem.dataset.userId = friend.id;
					friendItem.addEventListener('click', () => startChat(friend.id, friend.username));
					friendList.appendChild(friendItem);
				});
			} catch (error) {
				console.error('Error fetching friends:', error);
			}
		}

		// chat section
		document.addEventListener('DOMContentLoaded', function () {
			// Attach event listeners to chat items once the DOM is fully loaded
			const chatItems = document.querySelectorAll('.chatItem');
			chatItems.forEach(item => {
				item.addEventListener('click', function () {
					const userId = item.getAttribute('data-user-id');
					const username = item.getAttribute('data-username');
					startChat(userId, username);
				});
			});
		});

		function startChat(userId, username) {
			const chatArea = document.getElementById('chatArea');
			const chatWith = document.getElementById('chatWith');
			const chatMessages = document.getElementById('chatMessages');

			if (chatArea && chatWith && chatMessages) {
				chatArea.style.display = 'block';
				chatWith.textContent = username;

				chatMessages.innerHTML = '';

				fetch(`/chat/api/chat/${userId}/`, {
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token
					},
					credentials: 'include'  // Include cookies with the request
				})
				.then(response => response.json())
				.then(data => {
					data.forEach(message => {
						const msg = document.createElement('div');
						msg.textContent = `${message.sender}: ${message.message}`;
						chatMessages.appendChild(msg);
					});
				})
				.catch(error => console.error('Error fetching chat messages:', error));

				document.getElementById('sendMessage').onclick = () => sendMessage(userId);
			} else {
				console.error('Required chat elements not found in the DOM');
			}
		}

		async function sendMessage(userId) {
			const message = document.getElementById('chatInput').value;
			try {
				const response = await fetch(`chat/api/chat/${userId}/`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token
					},
					credentials: 'include',  // Include cookies with the request
					body: JSON.stringify({ message })
				});

				if (response.ok) {
					const chatMessages = document.getElementById('chatMessages');
					const msg = document.createElement('div');
					msg.textContent = `You: ${message}`;
					chatMessages.appendChild(msg);
					document.getElementById('chatInput').value = '';
				} else {
					const errorData = await response.json();
					console.error('Error sending message:', errorData);
				}
			} catch (error) {
				console.error('Error sending message:', error);
			}
		}

	</script>
	
