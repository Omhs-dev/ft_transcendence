# version: '3.8'

services:

  postgres:
    container_name: postgres_container
    image: postgres:latest
    env_file: 
      - ./.env   # Load environment variables from .env file
    ports:
      - "5432:5432"
    volumes:
      - database:/var/lib/postgresql/data  # Use named volume for persistence
    # healthcheck:
    #   test: ["CMD", "pg_isready", "-U", "postgres"]
    #   interval: 10s
    #   retries: 5
    #   start_period: 30s
    #   timeout: 10s
    networks:
      - webnet

  django:
    container_name: django_container
    build: ./backend/Django_Docker_files/
    environment:
       - DJANGO_SETTINGS_MODULE=Django_backend_project.settings.settings
    # ports:
    #   - "8000:8000"
    expose:
      - 8000
    volumes:
      - ./backend:/app  # Mount backend folder into the container
      - static_files:/app/staticfiles  # Mount static files volume
    depends_on:
      - postgres  # Ensure Django waits for PostgreSQL to be ready
    env_file: 
      - ./.env    # Load environment variables from .env file
    networks:
      webnet:
        aliases:
          - django
    stdin_open: true # Keep stdin open, so we can attach to the container for debugging with dpd in the django
    tty: true 

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - cadvisor

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - django
      - postgres
      - redis
      - nginx
      # - setup
      # - elasticsearch
      # - logstash
      # - kibana

  grafana:
    # image: grafana/grafana:latest
    container_name: grafana
    build: ./grafana/
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus



  redis:
    container_name: redis_container
    image: redis:6
    ports:
      - "6379:6379"
    networks:
      - webnet

  nginx:
    container_name: nginx_container
    build: 
      context: .
      dockerfile: ./nginx/Dockerfile
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - static_files:/home/app/static  # Mount static files volume
      - ./ELK/logstash/conf/access.log:/var/log/nginx/access.log
    #   - ./nginx:/etc/nginx/conf.d  # Mount custom Nginx config
    depends_on:
      - django
    networks:
      - webnet

  # setup:
  #   container_name: setup
  #   build: ./ELK/setup
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   env_file:
  #     - .env
  #   networks:
  #     - elk-stack
  #   healthcheck:
  #     test: ['CMD-SHELL', '[ -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]']
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120

  # elasticsearch:
  #   container_name: elasticsearch
  #   depends_on:
  #     setup:
  #       condition: service_healthy
  #   build: ./ELK/elasticsearch
  #   restart: always
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #     - elasticsearch:/usr/share/elasticsearch/data
  #   ports:
  #     - '9200:9200'
  #   env_file:
  #     - .env
  #   networks:
  #     - elk-stack
  #   mem_limit: ${MEM_LIMIT}
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1

  # logstash:
  #   container_name: logstash
  #   depends_on:
  #     setup:
  #       condition: service_healthy
  #   build: ./ELK/logstash
  #   restart: always
  #   volumes:
  #     - certs:/usr/share/logstash/config/certs
  #     - ./ELK/logstash/conf/access.log:/usr/share/logstash/nginx/access.log
  #   env_file:
  #     - .env
  #   networks:
  #     - elk-stack

  # kibana:
  #   container_name: kibana
  #   depends_on:
  #     setup:
  #       condition: service_healthy
  #   build: ./ELK/kibana
  #   restart: always
  #   volumes:
  #     - certs:/usr/share/kibana/config/certs
  #     - kibana:/usr/share/kibana/data
  #   ports:
  #     - '5601:5601'
  #   env_file:
  #     - .env
  #   networks:
  #     - elk-stack
  #   mem_limit: ${MEM_LIMIT}


volumes:
  static_files:  # Define named volume for static files
  database:  # Define named volume for PostgreSQL persistence
  certs:
    name: certs
  elasticsearch:
    name: elasticsearch
  kibana:
    name: kibana
  prometheus_data:
    name: prometheus_data
  grafana_data:
    name: grafana_data

networks:
  elk-stack:
    name: elk-stack
  webnet:
    driver: bridge
